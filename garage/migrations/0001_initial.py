# Generated by Django 4.0.4 on 2022-08-20 16:22

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Vectors',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('v_source', models.CharField(blank=True, max_length=30, null=True, verbose_name='Source of data')),
                ('json_data', models.JSONField(null=True, verbose_name='JSON data')),
            ],
            options={
                'verbose_name_plural': 'Vectors',
                'db_table': 'vectors',
            },
        ),
        migrations.CreateModel(
            name='Vehicles',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('v_number', models.PositiveIntegerField(unique=True, verbose_name='Vehicle NUM')),
                ('v_manufacture', models.CharField(max_length=30, verbose_name='Manufacture')),
                ('v_model', models.CharField(blank=True, max_length=50, null=True, verbose_name='Model')),
                ('v_date_of_prod', models.DateField(verbose_name='Date of prod.')),
            ],
            options={
                'verbose_name_plural': 'Vehicles',
                'db_table': 'vehicles',
            },
        ),
        migrations.CreateModel(
            name='Glasses',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('g_source', models.CharField(blank=True, max_length=30, null=True, verbose_name='Source of data')),
                ('g_damage_type', models.CharField(blank=True, max_length=255, null=True, verbose_name='Type of damage')),
                ('g_damage_side', models.CharField(blank=True, max_length=30, null=True, verbose_name='Damage side')),
                ('g_nak', models.FloatField(blank=True, default=0, null=True, verbose_name='NaK')),
                ('g_mgk', models.FloatField(blank=True, default=0, null=True, verbose_name='MsK')),
                ('g_alk', models.FloatField(blank=True, default=0, null=True, verbose_name='AlK')),
                ('g_sik', models.FloatField(blank=True, default=0, null=True, verbose_name='SiK')),
                ('g_sk', models.FloatField(blank=True, default=0, null=True, verbose_name='S K')),
                ('g_cik', models.FloatField(blank=True, default=0, null=True, verbose_name='CiK')),
                ('g_kka', models.FloatField(blank=True, default=0, null=True, verbose_name='KKA')),
                ('g_kkb', models.FloatField(blank=True, default=0, null=True, verbose_name='KKB')),
                ('g_caka', models.FloatField(blank=True, default=0, null=True, verbose_name='CaKA')),
                ('g_cakb', models.FloatField(blank=True, default=0, null=True, verbose_name='CaKB')),
                ('g_tik', models.FloatField(blank=True, default=0, null=True, verbose_name='TiK')),
                ('g_crk', models.FloatField(blank=True, default=0, null=True, verbose_name='CrK')),
                ('g_mnk', models.FloatField(blank=True, default=0, null=True, verbose_name='MsK')),
                ('g_fek', models.FloatField(blank=True, default=0, null=True, verbose_name='FeK')),
                ('g_coka', models.FloatField(blank=True, default=0, null=True, verbose_name='CoK')),
                ('g_cuka', models.FloatField(blank=True, default=0, null=True, verbose_name='CuKA')),
                ('g_cukb', models.FloatField(blank=True, default=0, null=True, verbose_name='CuKB')),
                ('g_znka', models.FloatField(blank=True, default=0, null=True, verbose_name='ZnKA')),
                ('g_znkb', models.FloatField(blank=True, default=0, null=True, verbose_name='ZnKB')),
                ('g_srk', models.FloatField(blank=True, default=0, null=True, verbose_name='SrK')),
                ('g_model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='garage.vehicles', verbose_name='Auto ID')),
            ],
            options={
                'verbose_name_plural': 'Glasses',
                'db_table': 'glasses',
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('image', models.ImageField(default='D:\\Projects\\project-glass\\media\\img\\default.png', upload_to='profile_pics')),
                ('is_viewer', models.BooleanField(default=True)),
                ('is_editor', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
